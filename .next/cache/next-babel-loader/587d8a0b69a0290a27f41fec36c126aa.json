{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\TaskApp\\\\TaskApp.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport '../CSS/TaskApp.module.css';\nimport TaskList from \"../TaskList/TaskList\";\nvar userId = 1; // We'll be using a const ID for the data fetches (for testing purposes)\n\nvar isTodoCompleted = false; // The Todos will be uncompleted by default\n\nvar TaskApp = /*#__PURE__*/function (_React$Component) {\n  _inherits(TaskApp, _React$Component);\n\n  var _super = _createSuper(TaskApp);\n\n  function TaskApp(props) {\n    var _this;\n\n    _classCallCheck(this, TaskApp);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: [],\n      task: ''\n    };\n    _this.taskInput = React.createRef();\n    _this.loaderInstance = React.createRef();\n    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_this));\n    _this.addTask = _this.addTask.bind(_assertThisInitialized(_this));\n    _this.storeTask = _this.storeTask.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TaskApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleLoader(true);\n      this.fetchTasks();\n    }\n  }, {\n    key: \"handleLoader\",\n    value: function handleLoader() {\n      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.loaderInstance.current.updateLoaderVisibility(status);\n    }\n  }, {\n    key: \"fetchTasks\",\n    value: function fetchTasks() {\n      var _this2 = this;\n\n      return fetch(\"https://jsonplaceholder.typicode.com/todos?userId=\".concat(userId)).then(function (response) {\n        return response.json();\n      }).then(function (tasks) {\n        _this2.setState({\n          items: tasks\n        });\n      }).then(function () {\n        _this2.handleLoader(false);\n      })[\"catch\"](console.error);\n    }\n  }, {\n    key: \"storeTask\",\n    value: function storeTask() {\n      var _this3 = this;\n\n      return fetch('https://jsonplaceholder.typicode.com/todos', {\n        method: 'POST',\n        body: JSON.stringify({\n          userId: userId,\n          title: this.state.task,\n          completed: isTodoCompleted\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (task) {\n        _this3.setState({\n          items: _this3.state.items.concat(task)\n        });\n      }).then(function () {\n        _this3.handleLoader(false);\n      })[\"catch\"](console.error);\n    }\n  }, {\n    key: \"addTask\",\n    value: function addTask(event) {\n      event.preventDefault();\n\n      if (this.state.task) {\n        this.handleLoader(true);\n        this.storeTask();\n        this.setState({\n          task: ''\n        });\n      } else {\n        alert('The task cannot be empty. Please enter a task.');\n      }\n\n      this.taskInput.current.focus();\n    }\n  }, {\n    key: \"onInputChange\",\n    value: function onInputChange(event) {\n      this.setState({\n        task: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"task-app container-fluid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"container p-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, \"My tasks\"), __jsx(Loader, {\n        ref: this.loaderInstance,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }), __jsx(\"form\", {\n        className: \"form-inline mb-5 mt-5\",\n        onSubmit: this.addTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, __jsx(\"input\", {\n        id: \"task-input\",\n        placeholder: \"Enter your task here...\",\n        className: \"form-control\",\n        onChange: this.onInputChange,\n        value: this.state.task,\n        autoComplete: \"off\",\n        ref: this.taskInput,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }), __jsx(\"button\", {\n        className: \"btn btn-info ml-1 font-weight-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }, \"Add Task\")), __jsx(TaskList, {\n        items: this.state.items,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return TaskApp;\n}(React.Component);\n\nexport default TaskApp;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programaci√≥n/Bluuweb/Next/ontime/components/TaskApp/TaskApp.js"],"names":["React","TaskList","userId","isTodoCompleted","TaskApp","props","state","items","task","taskInput","createRef","loaderInstance","onInputChange","bind","addTask","storeTask","handleLoader","fetchTasks","status","current","updateLoaderVisibility","fetch","then","response","json","tasks","setState","console","error","method","body","JSON","stringify","title","completed","headers","concat","event","preventDefault","alert","focus","target","value","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../CSS/TaskApp.module.css';\r\nimport TaskList from \"../TaskList/TaskList\";\r\n\r\nconst userId = 1; // We'll be using a const ID for the data fetches (for testing purposes)\r\nconst isTodoCompleted = false; // The Todos will be uncompleted by default\r\n\r\nclass TaskApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      task: ''\r\n    };\r\n\r\n    this.taskInput = React.createRef();\r\n    this.loaderInstance = React.createRef();\r\n\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n    this.addTask = this.addTask.bind(this);\r\n    this.storeTask = this.storeTask.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleLoader(true);\r\n    this.fetchTasks();\r\n  }\r\n\r\n  handleLoader(status = false) {\r\n    this.loaderInstance.current.updateLoaderVisibility(status);\r\n  }\r\n\r\n  fetchTasks() {\r\n    return fetch(`https://jsonplaceholder.typicode.com/todos?userId=${userId}`)\r\n      .then(response => response.json())\r\n      .then((tasks) => {\r\n        this.setState({items: tasks});\r\n      })\r\n      .then(() => {\r\n        this.handleLoader(false)\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n  storeTask() {\r\n    return fetch('https://jsonplaceholder.typicode.com/todos', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        userId: userId,\r\n        title: this.state.task,\r\n        completed: isTodoCompleted\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then((task) => {\r\n        this.setState({\r\n          items: this.state.items.concat(task)\r\n        });\r\n      })\r\n      .then(() => {\r\n        this.handleLoader(false)\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  addTask(event) {\r\n    event.preventDefault();\r\n\r\n    if (this.state.task) {\r\n      this.handleLoader(true);\r\n      this.storeTask();\r\n\r\n      this.setState({\r\n        task: ''\r\n      });\r\n    } else {\r\n      alert('The task cannot be empty. Please enter a task.')\r\n    }\r\n\r\n    this.taskInput.current.focus();\r\n  }\r\n\r\n  onInputChange(event) {\r\n    this.setState({task: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"task-app container-fluid\">\r\n        <div className=\"container p-5\">\r\n          <h1>My tasks</h1>\r\n\r\n          <Loader ref={this.loaderInstance}/>\r\n\r\n          <form className=\"form-inline mb-5 mt-5\" onSubmit={this.addTask}>\r\n            <input\r\n              id=\"task-input\"\r\n              placeholder=\"Enter your task here...\"\r\n              className=\"form-control\"\r\n              onChange={this.onInputChange}\r\n              value={this.state.task}\r\n              autoComplete=\"off\"\r\n              ref={this.taskInput}\r\n            />\r\n            <button className=\"btn btn-info ml-1 font-weight-bold\">\r\n              Add Task\r\n            </button>\r\n          </form>\r\n\r\n          <TaskList items={this.state.items}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskApp;"]},"metadata":{},"sourceType":"module"}