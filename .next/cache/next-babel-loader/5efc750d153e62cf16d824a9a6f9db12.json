{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\TaskM\\\\TaskM.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Input, Label } from 'reactstrap'; //constante JSON\n\nconst url = \"https://jsonplaceholder.typicode.com/todos/\";\nconst initState = {\n  todo: [],\n  modalInsertar: false,\n  modalEliminar: false,\n  tipoModal: \"\",\n  form: {\n    id: \"\",\n    title: \"\"\n  }\n};\nexport class TaskM extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"modalInsertar\", () => {\n      this.setState({\n        modalInsertar: !this.state.modalInsertar\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", async e => {\n      e.persist();\n      await this.setState({\n        form: _objectSpread(_objectSpread({}, this.state.form), {}, {\n          [e.target.name]: e.target.value\n        })\n      });\n      console.log(this.state.form);\n    });\n\n    _defineProperty(this, \"seleccionarTask\", todo => {\n      this.setState({\n        tipoModal: \"actualizar\",\n        form: {\n          id: todo.id,\n          title: todo.title\n        }\n      });\n    });\n\n    _defineProperty(this, \"peticionGet\", () => {\n      axios.get(url).then(response => {\n        this.setState({\n          todo: response.data\n        });\n      }).catch(error => {\n        console.log(error.message);\n      });\n    });\n\n    _defineProperty(this, \"peticionPost\", () => axios.post(url, this.state.form).then(response => {\n      if (response.status === 201) this.setState(oldState => _objectSpread(_objectSpread({}, initState), {}, {\n        todo: [...oldState.todo, oldState.form],\n        modalInsertar: !oldState.modalInsertar\n      }));\n    }).catch(error => {\n      console.log(error.message);\n    }));\n\n    _defineProperty(this, \"peticionPut\", () => {\n      axios.put(`${url}${this.state.form.id}`, this.state.form).then(response => {\n        if (response.status === 200) {\n          const newToDo = [...this.state.todo];\n          newToDo[this.state.form.id - 1].title = this.state.form.title;\n          this.setState(oldState => _objectSpread(_objectSpread({}, initState), {}, {\n            todo: newToDo,\n            modalInsertar: !oldState.modalInsertar\n          }));\n        }\n      }).catch(error => {\n        console.log(error.message);\n      });\n    });\n\n    _defineProperty(this, \"peticionDelete\", () => {\n      axios.delete(url + this.state.form.id).then(response => {\n        if (response.status === 200) {\n          const newToDo = this.state.todo.filter(task => task.id !== this.state.form.id);\n          this.setState(_objectSpread(_objectSpread({}, initState), {}, {\n            todo: newToDo,\n            modalEliminar: false\n          }));\n        }\n      }).catch(error => {\n        console.log(error.message);\n      });\n    });\n\n    this.state = {\n      todo: [],\n      modalInsertar: false,\n      modalEliminar: false,\n      tipoModal: \"\",\n      form: {\n        id: \"\",\n        title: \"\"\n      }\n    };\n  } //acciones\n\n\n  componentDidMount() {\n    this.peticionGet();\n  } //Task Manager\n\n\n  render() {\n    const {\n      form\n    } = this.state;\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      className: \"btn btn-success\",\n      onClick: () => this.setState(oldState => _objectSpread(_objectSpread({}, oldState), {}, {\n        modalInsertar: !oldState.modalInsertar,\n        tipoModal: \"insertar\",\n        form: {\n          id: this.state.todo.length + 1,\n          title: \"\"\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, \"Agregar Task\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 27\n      }\n    }), __jsx(\"table\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }, __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    }, \"ID\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }, \"TASK\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 33\n      }\n    }, \"ACCIONES\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }, this.state.todo.map(userID => {\n      return __jsx(\"tr\", {\n        key: userID.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 37\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 41\n        }\n      }, userID.id), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 41\n        }\n      }, userID.title), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 41\n        }\n      }, __jsx(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => {\n          this.seleccionarTask(userID);\n          this.modalInsertar();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 45\n        }\n      }, \"Editar\"), \"   \", __jsx(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: () => {\n          this.seleccionarTask(userID);\n          this.setState({\n            modalEliminar: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 45\n        }\n      }, \"Eliminar\")));\n    })))), __jsx(Modal, {\n      isOpen: this.state.modalInsertar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, __jsx(ModalHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, \"Nueva Task\"), __jsx(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, __jsx(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, __jsx(Label, {\n      htmlFor: \"id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, \"ID\"), __jsx(Input, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"id\",\n      id: \"id\",\n      readOnly: true,\n      onChange: this.handleChange,\n      value: form.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }), __jsx(Label, {\n      htmlFor: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }, \"Task\"), __jsx(Input, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"title\",\n      id: \"title\",\n      onChange: this.handleChange,\n      value: form.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }))), __jsx(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, this.state.tipoModal == \"insertar\" ? __jsx(Button, {\n      className: \"btn btn-success\",\n      onClick: () => this.peticionPost(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, \"Agregar\") : __jsx(Button, {\n      className: \"btn btn-success\",\n      onClick: () => this.peticionPut(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, \"Actualizar\"), __jsx(Button, {\n      className: \"btn btn-danger\",\n      onClick: () => this.modalInsertar(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, \"Cancelar\"))), __jsx(Modal, {\n      isOpen: this.state.modalEliminar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, __jsx(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, \"Est\\xE1s seguro que deseas eliminar esta Task? \", form && form.title), __jsx(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.peticionDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }, \"Si\"), __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: () => this.setState({\n        modalEliminar: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }, \"NO\"))));\n  }\n\n}\nexport default TaskM;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programación/Bluuweb/Next/ontime/components/TaskM/TaskM.js"],"names":["React","Component","axios","Button","Modal","ModalHeader","ModalBody","ModalFooter","FormGroup","Input","Label","url","initState","todo","modalInsertar","modalEliminar","tipoModal","form","id","title","TaskM","constructor","props","setState","state","e","persist","target","name","value","console","log","get","then","response","data","catch","error","message","post","status","oldState","put","newToDo","delete","filter","task","componentDidMount","peticionGet","render","length","map","userID","seleccionarTask","handleChange","peticionPost","peticionPut","peticionDelete"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Input, Label} from 'reactstrap';\r\n\r\n//constante JSON\r\nconst url = \"https://jsonplaceholder.typicode.com/todos/\";\r\nconst initState = { \r\n            todo: [],\r\n            modalInsertar: false,\r\n            modalEliminar: false,\r\n            tipoModal: \"\",\r\n            form: {\r\n                id: \"\",\r\n                title: \"\",\r\n              },\r\n        };\r\n\r\nexport class TaskM extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = { \r\n            todo: [],\r\n            modalInsertar: false,\r\n            modalEliminar: false,\r\n            tipoModal: \"\",\r\n            form: {\r\n                id: \"\",\r\n                title: \"\",\r\n              },\r\n        };\r\n    }\r\n\r\n//acciones\r\n    modalInsertar=()=>{\r\n        this.setState({modalInsertar: !this.state.modalInsertar});\r\n    }\r\n    \r\n    handleChange= async e=>{\r\n        e.persist();\r\n        await this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n        console.log(this.state.form);\r\n    }\r\n\r\n    seleccionarTask=(todo)=>{\r\n        this.setState({\r\n            tipoModal: \"actualizar\",\r\n            form: {\r\n                id: todo.id,\r\n                title: todo.title\r\n            }\r\n        })\r\n    }\r\n\r\n//peticiones\r\n    peticionGet= () => {\r\n        axios.get(url).then(response=>{\r\n            this.setState({todo: response.data});\r\n        }).catch(error=>{\r\n            console.log(error.message);\r\n          })\r\n    }\r\n\r\n    peticionPost = () => axios.post(url, this.state.form).then(response=>{\r\n        if (response.status === 201)\r\n           this.setState(oldState => ({...initState, todo: [...oldState.todo, oldState.form], modalInsertar: !oldState.modalInsertar, }))\r\n            }).catch(error=>{\r\n            console.log(error.message);\r\n    })\r\n\r\n    peticionPut = () => {\r\n        axios.put(`${url}${this.state.form.id}`, this.state.form).then(response=>{\r\n          if (response.status === 200) {\r\n              const newToDo = [...this.state.todo]\r\n              newToDo[this.state.form.id - 1].title = this.state.form.title\r\n              this.setState(oldState => ({...initState, todo: newToDo, modalInsertar: !oldState.modalInsertar, }))\r\n          }\r\n        }).catch(error=>{\r\n           console.log(error.message);\r\n    })}\r\n\r\n    peticionDelete=()=>{\r\n        axios.delete(url + this.state.form.id).then(response=>{\r\n            if (response.status === 200) {\r\n                const newToDo = this.state.todo.filter(task => task.id !== this.state.form.id);\r\n                this.setState({...initState, todo: newToDo, modalEliminar: false })\r\n            }\r\n        }).catch(error=>{\r\n            console.log(error.message);\r\n     })}\r\n    \r\n    componentDidMount() {\r\n        this.peticionGet();\r\n    }\r\n\r\n//Task Manager\r\n    render() {\r\n        const {form} = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"App\">\r\n                    <br />\r\n                    <Button\r\n                        className=\"btn btn-success\" \r\n                        onClick={\r\n                            () => this.setState(oldState => ({\r\n                                    ...oldState,\r\n                                    modalInsertar: !oldState.modalInsertar,\r\n                                    tipoModal: \"insertar\",\r\n                                    form: {\r\n                                        id: this.state.todo.length+1,\r\n                                        title: \"\",\r\n                                      }\r\n                                }))}\r\n                    >\r\n                                Agregar Task\r\n                    </Button>\r\n                    <br /><br />\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th>ID</th>\r\n                                <th>TASK</th>\r\n                                <th>ACCIONES</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.todo.map((userID,)=>{\r\n                                return(\r\n                                    <tr key={userID.id}>\r\n                                        <td>{userID.id}</td>\r\n                                        <td>{userID.title}</td>\r\n                                        <td>\r\n                                            <button className=\"btn btn-secondary\" \r\n                                            onClick={()=>{this.seleccionarTask(userID); this.modalInsertar()}}>Editar</button>\r\n                                            {\"   \"}\r\n                                            <button className=\"btn btn-danger\"\r\n                                            onClick={()=>{this.seleccionarTask(userID); this.setState({modalEliminar: true})}}\r\n                                            >Eliminar</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Modal Agregar/Editar */}\r\n                <Modal isOpen={this.state.modalInsertar}>\r\n                    <ModalHeader>\r\n                    Nueva Task\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"id\">ID</Label>\r\n                        <Input \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        name=\"id\"  \r\n                        id= \"id\"\r\n                        readOnly \r\n                        onChange={this.handleChange}\r\n                        value={form.id}/>\r\n                        <br />\r\n                        <Label htmlFor=\"title\">Task</Label>\r\n                        <Input \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        name=\"title\" \r\n                        id=\"title\"\r\n                        onChange={this.handleChange}\r\n                        value={form.title}/> \r\n                    </FormGroup>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        {this.state.tipoModal == \"insertar\"?\r\n                        <Button className=\"btn btn-success\" onClick={()=>this.peticionPost()}>Agregar</Button>:\r\n                        <Button className=\"btn btn-success\" onClick={()=>this.peticionPut()}>Actualizar</Button>\r\n                        }\r\n                        <Button className=\"btn btn-danger\" onClick={()=>this.modalInsertar()}>Cancelar</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* Modal Eliminar */}\r\n                <Modal isOpen={this.state.modalEliminar}>\r\n                    <ModalBody>\r\n                        Estás seguro que deseas eliminar esta Task? {form && form.title}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <button className=\"btn btn-success\" onClick={()=>this.peticionDelete()}>Si</button>\r\n                        <button className=\"btn btn-danger\" onClick={()=>this.setState({modalEliminar: false})}>NO</button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskM"]},"metadata":{},"sourceType":"module"}