{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\New\\\\layout\\\\TextInputGroup.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // Destructure here, so we don't have to type props.... each time\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error\n}) => {\n  return __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, label), __jsx(\"input\", {\n    type: type,\n    name: name,\n    className: classnames(\"form-control form-control-lg\", {\n      \"is-invalid\": error\n    }),\n    placeholder: placeholder // Will not be able to type in input field, until there is an onChange() event, because initial state is immutable\n    ,\n    value: value // Use onChange property to and object to pass the function to change state\n    ,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }), error && __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }\n  }, error));\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string\n};\nTextInputGroup.defaultProps = {\n  type: \"text\"\n};\nexport default TextInputGroup;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/ProgramaciÃ³n/Bluuweb/Next/ontime/components/New/layout/TextInputGroup.js"],"names":["React","PropTypes","classnames","TextInputGroup","label","name","value","placeholder","type","onChange","error","propTypes","string","isRequired","func","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAAC;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,IAFoB;AAGpBC,EAAAA,KAHoB;AAIpBC,EAAAA,WAJoB;AAKpBC,EAAAA,IALoB;AAMpBC,EAAAA,QANoB;AAOpBC,EAAAA;AAPoB,CAAD,KAQjB;AACF,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAEL,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,KAAvB,CADJ,EAEI;AACI,IAAA,IAAI,EAAEI,IADV;AAEI,IAAA,IAAI,EAAEH,IAFV;AAGI,IAAA,SAAS,EAAEH,UAAU,CAAC,8BAAD,EAAiC;AAClD,oBAAcQ;AADoC,KAAjC,CAHzB;AAMI,IAAA,WAAW,EAAEH,WANjB,CAM8B;AAN9B;AAOI,IAAA,KAAK,EAAED,KAPX,CAOkB;AAPlB;AAQI,IAAA,QAAQ,EAAEG,QARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAYKC,KAAK,IAAI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCA,KAAnC,CAZd,CADJ;AAgBH,CAzBD;;AA2BAP,cAAc,CAACQ,SAAf,GAA2B;AACvBP,EAAAA,KAAK,EAAEH,SAAS,CAACW,MAAV,CAAiBC,UADD;AAEvBR,EAAAA,IAAI,EAAEJ,SAAS,CAACW,MAAV,CAAiBC,UAFA;AAGvBN,EAAAA,WAAW,EAAEN,SAAS,CAACW,MAAV,CAAiBC,UAHP;AAIvBP,EAAAA,KAAK,EAAEL,SAAS,CAACW,MAAV,CAAiBC,UAJD;AAKvBL,EAAAA,IAAI,EAAEP,SAAS,CAACW,MAAV,CAAiBC,UALA;AAMvBJ,EAAAA,QAAQ,EAAER,SAAS,CAACa,IAAV,CAAeD,UANF;AAOvBH,EAAAA,KAAK,EAAET,SAAS,CAACW;AAPM,CAA3B;AAUAT,cAAc,CAACY,YAAf,GAA8B;AAC1BP,EAAAA,IAAI,EAAE;AADoB,CAA9B;AAIA,eAAeL,cAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// Destructure here, so we don't have to type props.... each time\nconst TextInputGroup = ({\n    label,\n    name,\n    value,\n    placeholder,\n    type,\n    onChange,\n    error\n}) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input\n                type={type}\n                name={name}\n                className={classnames(\"form-control form-control-lg\", {\n                    \"is-invalid\": error\n                })}\n                placeholder={placeholder} // Will not be able to type in input field, until there is an onChange() event, because initial state is immutable\n                value={value} // Use onChange property to and object to pass the function to change state\n                onChange={onChange}\n            />\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n};\n\nTextInputGroup.defaultProps = {\n    type: \"text\"\n};\n\nexport default TextInputGroup;\n"]},"metadata":{},"sourceType":"module"}