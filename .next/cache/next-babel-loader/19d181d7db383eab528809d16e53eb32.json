{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\TaskM\\\\TaskM.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Input, Label } from 'reactstrap';\nvar url = \"https://jsonplaceholder.typicode.com/todos\";\nexport var TaskM = /*#__PURE__*/function (_Component) {\n  _inherits(TaskM, _Component);\n\n  var _super = _createSuper(TaskM);\n\n  function TaskM() {\n    var _this;\n\n    _classCallCheck(this, TaskM);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: [],\n      modalInsertar: false,\n      form: {\n        id: '',\n        title: ''\n      },\n      tipoModal: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"modalInsertar\", function () {\n      _this.setState({\n        modalInsertar: !_this.state.modalInsertar\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.persist();\n                _context.next = 3;\n                return _this.setState({\n                  form: _objectSpread(_objectSpread({}, _this.state.form), {}, _defineProperty({}, e.target.name, e.target.value))\n                });\n\n              case 3:\n                console.log(_this.state.form);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"seleccionTask\", function (userID) {\n      _this.setState({\n        tipoModal: 'actualizar',\n        form: {\n          id: userID.id,\n          title: userID.title\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionGet\", function () {\n      axios.get(url).then(function (response) {\n        _this.setState({\n          data: response.data\n        });\n      })[\"catch\"](function (error) {\n        console.log(error.message);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionPost\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              delete _this.state.form.id;\n              _context2.next = 3;\n              return axios.post(url, _this.state.form).then(function (response) {\n                _this.modalInsertar();\n\n                _this.peticionGet();\n              })[\"catch\"](function (error) {\n                console.log(error.message);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionPut\", function () {\n      axios.put(url + _this.state.form.id, _this.state.form).then(function (response) {\n        _this.modalInsertar();\n\n        _this.peticionGet();\n      })[\"catch\"](function (error) {\n        console.log(error.message);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TaskM, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.peticionGet();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var form = this.state.form;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }), __jsx(Button, {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          _this2.setState({\n            form: null,\n            tipoModal: 'insertar'\n          });\n\n          _this2.modalInsertar();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }, \"Agregar Task\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 27\n        }\n      }), __jsx(\"table\", {\n        className: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 33\n        }\n      }, \"ID\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 33\n        }\n      }, \"TASK\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }\n      }, \"ACCIONES\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }, this.state.data.map(function (userID) {\n        return __jsx(\"tr\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }\n        }, __jsx(\"td\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 41\n          }\n        }, userID.id), __jsx(\"td\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 41\n          }\n        }, userID.title), __jsx(\"td\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 41\n          }\n        }, __jsx(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: function onClick() {\n            _this2.seleccionTask(userID);\n\n            _this2.modalInsertar();\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 45\n          }\n        }, \"Editar\"), \"   \", __jsx(\"button\", {\n          className: \"btn btn-danger\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 45\n          }\n        }, \"Eliminar\")));\n      })))), __jsx(Modal, {\n        isOpen: this.state.modalInsertar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, __jsx(ModalHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, \"Nueva Task\"), __jsx(ModalBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, __jsx(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, __jsx(Label, {\n        htmlFor: \"id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }, \"ID\"), __jsx(Input, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"id\",\n        id: \"id\",\n        readOnly: true,\n        onChange: this.handleChange,\n        value: form ? form.id : this.state.data.length + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }), __jsx(Label, {\n        htmlFor: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, \"Task\"), __jsx(Input, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"title\",\n        id: \"id\",\n        onChange: this.handleChange,\n        value: form ? form.title : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }))), __jsx(ModalFooter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, this.state.tipoModal == 'insertar' ? __jsx(Button, {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.peticionPost();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }\n      }, \"Agregar\") : __jsx(Button, {\n        className: \"btn btn-primary\",\n        onClick: function onClick() {\n          return _this2.peticionPut();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      }, \"Actualizar\"), __jsx(Button, {\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          return _this2.modalInsertar();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }\n      }, \"Cancelar\"))));\n    }\n  }]);\n\n  return TaskM;\n}(Component);\nexport default TaskM;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programación/Bluuweb/Next/ontime/components/TaskM/TaskM.js"],"names":["React","Component","axios","Button","Modal","ModalHeader","ModalBody","ModalFooter","FormGroup","Input","Label","url","TaskM","data","modalInsertar","form","id","title","tipoModal","setState","state","e","persist","target","name","value","console","log","userID","get","then","response","error","message","post","peticionGet","put","map","seleccionTask","handleChange","length","peticionPost","peticionPut"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Input, Label} from 'reactstrap';\r\n\r\nconst url= \"https://jsonplaceholder.typicode.com/todos\"\r\n\r\nexport class TaskM extends Component {\r\n    state = { \r\n        data: [],\r\n        modalInsertar: false,\r\n        form: {\r\n            id: '',\r\n            title: '',\r\n          },\r\n          tipoModal: '',\r\n    };\r\n\r\n    modalInsertar=()=>{\r\n        this.setState({modalInsertar: !this.state.modalInsertar});\r\n    }\r\n\r\n    handleChange= async e=>{\r\n        e.persist();\r\n        await this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n        console.log(this.state.form);\r\n    }\r\n\r\n    seleccionTask=(userID)=>{\r\n        this.setState({\r\n            tipoModal: 'actualizar',\r\n            form: {\r\n                id: userID.id,\r\n                title: userID.title,\r\n              }\r\n        })\r\n    }\r\n\r\n    peticionGet=()=> {\r\n        axios.get(url).then(response=>{\r\n            this.setState({data: response.data});\r\n        }).catch(error=>{\r\n            console.log(error.message);\r\n          })\r\n    }\r\n\r\n    peticionPost= async ()=>{\r\n        delete this.state.form.id;\r\n        await axios.post(url, this.state.form).then(response=>{\r\n          this.modalInsertar();\r\n          this.peticionGet();\r\n        }).catch(error=>{\r\n          console.log(error.message);\r\n        })\r\n    }\r\n\r\n    peticionPut=()=>{\r\n        axios.put(url+this.state.form.id, this.state.form).then(response=>{\r\n          this.modalInsertar();\r\n          this.peticionGet();\r\n        }).catch(error=>{\r\n            console.log(error.message);\r\n          })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.peticionGet();\r\n    }\r\n\r\n    render() {\r\n        const {form} = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"App\">\r\n                    <br />\r\n                    <Button \r\n                    className=\"btn btn-success\" \r\n                    onClick={()=>{this.setState({form: null, tipoModal: 'insertar'}); this.modalInsertar()}}\r\n                    >Agregar Task</Button>\r\n                    <br /><br />\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>TASK</th>\r\n                                <th>ACCIONES</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.data.map((userID,)=>{\r\n                                return(\r\n                                    <tr>\r\n                                        <td>{userID.id}</td>\r\n                                        <td>{userID.title}</td>\r\n                                        <td>\r\n                                            <button \r\n                                            className=\"btn btn-secondary\" \r\n                                            onClick={()=>{this.seleccionTask(userID); this.modalInsertar()}}>Editar</button>\r\n                                            {\"   \"}\r\n                                            <button className=\"btn btn-danger\">Eliminar</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <Modal isOpen={this.state.modalInsertar}>\r\n                    <ModalHeader>\r\n                    Nueva Task\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"id\">ID</Label>\r\n                        <Input \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        name=\"id\" id=\"id\" \r\n                        readOnly \r\n                        onChange={this.handleChange}\r\n                        value={form?form.id: this.state.data.length+1}/>\r\n                        <br />\r\n                        <Label htmlFor=\"title\">Task</Label>\r\n                        <Input \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        name=\"title\" \r\n                        id=\"id\" \r\n                        onChange={this.handleChange}\r\n                        value={form?form.title: ''}/> \r\n                    </FormGroup>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        {this.state.tipoModal == 'insertar'?\r\n                        <Button className=\"btn btn-success\" onClick={()=>this.peticionPost()}>Agregar</Button>:\r\n                        <Button className=\"btn btn-primary\" onClick={()=>this.peticionPut()}>Actualizar</Button>\r\n                        }\r\n                        <Button className=\"btn btn-danger\" onClick={()=>this.modalInsertar()}>Cancelar</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskM\r\n"]},"metadata":{},"sourceType":"module"}