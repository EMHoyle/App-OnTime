{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\New\\\\contacts\\\\Contacts.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Contact from \"./Contact\";\nimport { Consumer } from \"../context/context\"; // We use class base component because we want to use 'state'\n\nvar Contacts = /*#__PURE__*/function (_Component) {\n  _inherits(Contacts, _Component);\n\n  var _super = _createSuper(Contacts);\n\n  function Contacts() {\n    _classCallCheck(this, Contacts);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Contacts, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return __jsx(Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 13\n        }\n      }, function (value) {\n        // destructuring contacts, assign to value\n        var contacts = value.contacts;\n        return (// Fragments removes uncessary elements you don't need, here we take out the <div></div>\n          __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 15,\n              columnNumber: 25\n            }\n          }, __jsx(\"h1\", {\n            className: \"display-4 mb-2\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 29\n            }\n          }, __jsx(\"span\", {\n            className: \"text-danger\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 33\n            }\n          }, \"Contact\"), \" \", \"List\"), contacts.map(function (contact) {\n            return __jsx(Contact, {\n              key: contact.id,\n              contact: contact,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 33\n              }\n            });\n          }))\n        );\n      });\n    }\n  }]);\n\n  return Contacts;\n}(Component);\n\nexport default Contacts;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programaci√≥n/Bluuweb/Next/ontime/components/New/contacts/Contacts.js"],"names":["React","Component","Contact","Consumer","Contacts","value","contacts","map","contact","id"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAEA;;IACMC,Q;;;;;;;;;;;;;6BACO;AAAA;;AACL,aACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,UAAAC,KAAK,EAAI;AACN;AADM,YAEEC,QAFF,GAEeD,KAFf,CAEEC,QAFF;AAGN,eACI;AACA,gBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAI,YAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAM,YAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EACiD,GADjD,SADJ,EAKKA,QAAQ,CAACC,GAAT,CAAa,UAAAC,OAAO;AAAA,mBACjB,MAAC,OAAD;AAAS,cAAA,GAAG,EAAEA,OAAO,CAACC,EAAtB;AAA0B,cAAA,OAAO,EAAED,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADiB;AAAA,WAApB,CALL;AAFJ;AAYH,OAhBL,CADJ;AAoBH;;;;EAtBkBP,S;;AAyBvB,eAAeG,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Contact from \"./Contact\";\nimport { Consumer } from \"../context/context\";\n\n// We use class base component because we want to use 'state'\nclass Contacts extends Component {\n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    // destructuring contacts, assign to value\n                    const { contacts } = value;\n                    return (\n                        // Fragments removes uncessary elements you don't need, here we take out the <div></div>\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-2\">\n                                <span className=\"text-danger\">Contact</span>{\" \"}\n                                List\n                            </h1>\n                            {contacts.map(contact => (\n                                <Contact key={contact.id} contact={contact} />\n                            ))}\n                        </React.Fragment>\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\nexport default Contacts;\n"]},"metadata":{},"sourceType":"module"}