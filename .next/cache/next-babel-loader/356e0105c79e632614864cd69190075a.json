{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\TaskApp\\\\TaskApp.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport '../CSS/TaskApp.module.css';\nimport TaskList from \"../TaskList/TaskList\";\nimport Loader from '../Loader/Loader';\nconst userId = 1; // We'll be using a const ID for the data fetches (for testing purposes)\n\nconst isTodoCompleted = false; // The Todos will be uncompleted by default\n\nclass TaskApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      task: ''\n    };\n    this.taskInput = React.createRef();\n    this.loaderInstance = React.createRef();\n    this.onInputChange = this.onInputChange.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.storeTask = this.storeTask.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleLoader(true);\n    this.fetchTasks();\n  }\n\n  handleLoader(status = false) {\n    this.loaderInstance.current.updateLoaderVisibility(status);\n  }\n\n  fetchTasks() {\n    return fetch(`https://jsonplaceholder.typicode.com/todos?userId=${userId}`).then(response => response.json()).then(tasks => {\n      this.setState({\n        items: tasks\n      });\n    }).then(() => {\n      this.handleLoader(false);\n    }).catch(console.error);\n  }\n\n  storeTask() {\n    return fetch('https://jsonplaceholder.typicode.com/todos', {\n      method: 'POST',\n      body: JSON.stringify({\n        userId: userId,\n        title: this.state.task,\n        completed: isTodoCompleted\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => response.json()).then(task => {\n      this.setState({\n        items: this.state.items.concat(task)\n      });\n    }).then(() => {\n      this.handleLoader(false);\n    }).catch(console.error);\n  }\n\n  addTask(event) {\n    event.preventDefault();\n\n    if (this.state.task) {\n      this.handleLoader(true);\n      this.storeTask();\n      this.setState({\n        task: ''\n      });\n    } else {\n      alert('No se puede agregar una Task vacía. por favor escribe una Task.');\n    }\n\n    this.taskInput.current.focus();\n  }\n\n  onInputChange(event) {\n    this.setState({\n      task: event.target.value\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"task-app container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"container p-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Task Manager\"), __jsx(Loader, {\n      ref: this.loaderInstance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }), __jsx(\"form\", {\n      className: \"form-inline mb-5 mt-5\",\n      onSubmit: this.addTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, __jsx(\"input\", {\n      id: \"task-input\",\n      placeholder: \"Agrega tu task aqu\\xED...\",\n      className: \"form-control\",\n      onChange: this.onInputChange,\n      value: this.state.task,\n      autoComplete: \"off\",\n      ref: this.taskInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      className: \"btn btn-success ml-1 font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"Agregar Task\"), __jsx(\"button\", {\n      className: \"btn btn-secondary ml-1 font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"Editar Task\"), __jsx(\"button\", {\n      className: \"btn btn-danger ml-1 font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Eliminar Task\"), __jsx(\"button\", {\n      className: \"btn btn-secondary ml-1 font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Actualizar\")), __jsx(TaskList, {\n      items: this.state.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default TaskApp;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programación/Bluuweb/Next/ontime/components/TaskApp/TaskApp.js"],"names":["React","TaskList","Loader","userId","isTodoCompleted","TaskApp","Component","constructor","props","state","items","task","taskInput","createRef","loaderInstance","onInputChange","bind","addTask","storeTask","componentDidMount","handleLoader","fetchTasks","status","current","updateLoaderVisibility","fetch","then","response","json","tasks","setState","catch","console","error","method","body","JSON","stringify","title","completed","headers","concat","event","preventDefault","alert","focus","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../CSS/TaskApp.module.css';\r\nimport TaskList from \"../TaskList/TaskList\";\r\nimport Loader from '../Loader/Loader'\r\n\r\nconst userId = 1; // We'll be using a const ID for the data fetches (for testing purposes)\r\nconst isTodoCompleted = false; // The Todos will be uncompleted by default\r\n\r\nclass TaskApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      task: ''\r\n    };\r\n\r\n    this.taskInput = React.createRef();\r\n    this.loaderInstance = React.createRef();\r\n\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n    this.addTask = this.addTask.bind(this);\r\n    this.storeTask = this.storeTask.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleLoader(true);\r\n    this.fetchTasks();\r\n  }\r\n\r\n  handleLoader(status = false) {\r\n    this.loaderInstance.current.updateLoaderVisibility(status);\r\n  }\r\n\r\n  fetchTasks() {\r\n    return fetch(`https://jsonplaceholder.typicode.com/todos?userId=${userId}`)\r\n      .then(response => response.json())\r\n      .then((tasks) => {\r\n        this.setState({items: tasks});\r\n      })\r\n      .then(() => {\r\n        this.handleLoader(false)\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n  storeTask() {\r\n    return fetch('https://jsonplaceholder.typicode.com/todos', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        userId: userId,\r\n        title: this.state.task,\r\n        completed: isTodoCompleted\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then((task) => {\r\n        this.setState({\r\n          items: this.state.items.concat(task)\r\n        });\r\n      })\r\n      .then(() => {\r\n        this.handleLoader(false)\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  addTask(event) {\r\n    event.preventDefault();\r\n\r\n    if (this.state.task) {\r\n      this.handleLoader(true);\r\n      this.storeTask();\r\n\r\n      this.setState({\r\n        task: ''\r\n      });\r\n    } else {\r\n      alert('No se puede agregar una Task vacía. por favor escribe una Task.')\r\n    }\r\n\r\n    this.taskInput.current.focus();\r\n  }\r\n\r\n  onInputChange(event) {\r\n    this.setState({task: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"task-app container-fluid\">\r\n        <div className=\"container p-5\">\r\n          <h1>Task Manager</h1>\r\n\r\n          <Loader ref={this.loaderInstance}/>\r\n\r\n          <form className=\"form-inline mb-5 mt-5\"  onSubmit={this.addTask}>\r\n            <input\r\n              id=\"task-input\"\r\n              placeholder=\"Agrega tu task aquí...\"\r\n              className=\"form-control\"\r\n              onChange={this.onInputChange}\r\n              value={this.state.task}\r\n              autoComplete=\"off\"\r\n              ref={this.taskInput}\r\n            />\r\n            <button className=\"btn btn-success ml-1 font-weight-bold\">\r\n              Agregar Task\r\n            </button>\r\n            <button className=\"btn btn-secondary ml-1 font-weight-bold\">\r\n              Editar Task\r\n            </button>\r\n            <button className=\"btn btn-danger ml-1 font-weight-bold\">\r\n              Eliminar Task\r\n            </button>\r\n            <button className=\"btn btn-secondary ml-1 font-weight-bold\">\r\n              Actualizar\r\n            </button>\r\n          </form>\r\n\r\n          <TaskList items={this.state.items}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskApp;"]},"metadata":{},"sourceType":"module"}