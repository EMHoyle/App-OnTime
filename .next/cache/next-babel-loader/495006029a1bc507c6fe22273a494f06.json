{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\TaskM\\\\TaskM.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Input, Label } from 'reactstrap'; //constante JSON\n\nvar url = \"https://jsonplaceholder.typicode.com/todos/\";\nvar initState = {\n  todo: [],\n  modalInsertar: false,\n  modalEliminar: false,\n  tipoModal: \"\",\n  form: {\n    id: \"\",\n    title: \"\"\n  }\n};\nexport var TaskM = /*#__PURE__*/function (_Component) {\n  _inherits(TaskM, _Component);\n\n  var _super = _createSuper(TaskM);\n\n  function TaskM(props) {\n    var _this;\n\n    _classCallCheck(this, TaskM);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"modalInsertar\", function () {\n      _this.setState({\n        modalInsertar: !_this.state.modalInsertar\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.persist();\n                _context.next = 3;\n                return _this.setState({\n                  form: _objectSpread(_objectSpread({}, _this.state.form), {}, _defineProperty({}, e.target.name, e.target.value))\n                });\n\n              case 3:\n                console.log(_this.state.form);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"seleccionarTask\", function (todo) {\n      _this.setState({\n        tipoModal: \"actualizar\",\n        form: {\n          id: todo.id,\n          title: todo.title\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionGet\", function () {\n      axios.get(url).then(function (response) {\n        _this.setState({\n          todo: response.data\n        });\n      })[\"catch\"](function (error) {\n        console.log(error.message);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionPost\", function () {\n      return axios.post(url, _this.state.form).then(function (response) {\n        if (response.status === 201) _this.setState(function (oldState) {\n          return _objectSpread(_objectSpread({}, initState), {}, {\n            todo: [].concat(_toConsumableArray(oldState.todo), [oldState.form]),\n            modalInsertar: !oldState.modalInsertar\n          });\n        });\n      })[\"catch\"](function (error) {\n        console.log(error.message);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionPut\", function () {\n      axios.put(\"\".concat(url).concat(_this.state.form.id), _this.state.form).then(function (response) {\n        if (response.status === 200) {\n          var newToDo = _toConsumableArray(_this.state.todo);\n\n          newToDo[_this.state.form.id - 1].title = _this.state.form.title;\n\n          _this.setState(function (oldState) {\n            return _objectSpread(_objectSpread({}, initState), {}, {\n              todo: newToDo,\n              modalInsertar: !oldState.modalInsertar\n            });\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.log(error.message);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"peticionDelete\", function () {\n      axios[\"delete\"](url + _this.state.form.id).then(function (response) {\n        _this.setState({\n          modalEliminar: false\n        });\n\n        _this.peticionGet();\n      })[\"catch\"](function (error) {\n        console.log(error.message);\n      });\n    });\n\n    _this.state = {\n      todo: [],\n      modalInsertar: false,\n      modalEliminar: false,\n      tipoModal: \"\",\n      form: {\n        id: \"\",\n        title: \"\"\n      }\n    };\n    return _this;\n  } //acciones\n\n\n  _createClass(TaskM, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.peticionGet();\n    } //Task Manager\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var form = this.state.form;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }), __jsx(Button, {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.setState(function (oldState) {\n            return _objectSpread(_objectSpread({}, oldState), {}, {\n              modalInsertar: !oldState.modalInsertar,\n              tipoModal: \"insertar\",\n              form: {\n                id: _this2.state.todo.length + 1,\n                title: \"\"\n              }\n            });\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, \"Agregar Task\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 27\n        }\n      }), __jsx(\"table\", {\n        className: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 33\n        }\n      }, \"ID\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 33\n        }\n      }, \"TASK\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 33\n        }\n      }, \"ACCIONES\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }, this.state.todo.map(function (userID) {\n        return __jsx(\"tr\", {\n          key: userID.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 37\n          }\n        }, __jsx(\"td\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 41\n          }\n        }, userID.id), __jsx(\"td\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 41\n          }\n        }, userID.title), __jsx(\"td\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 41\n          }\n        }, __jsx(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: function onClick() {\n            _this2.seleccionarTask(userID);\n\n            _this2.modalInsertar();\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 45\n          }\n        }, \"Editar\"), \"   \", __jsx(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: function onClick() {\n            _this2.seleccionarTask(userID);\n\n            _this2.setState({\n              modalEliminar: true\n            });\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 45\n          }\n        }, \"Eliminar\")));\n      })))), __jsx(Modal, {\n        isOpen: this.state.modalInsertar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, __jsx(ModalHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }, \"Nueva Task\"), __jsx(ModalBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      }, __jsx(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }\n      }, __jsx(Label, {\n        htmlFor: \"id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }\n      }, \"ID\"), __jsx(Input, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"id\",\n        id: \"id\",\n        readOnly: true,\n        onChange: this.handleChange,\n        value: form.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      }), __jsx(Label, {\n        htmlFor: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }\n      }, \"Task\"), __jsx(Input, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"title\",\n        id: \"title\",\n        onChange: this.handleChange,\n        value: form.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }\n      }))), __jsx(ModalFooter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }, this.state.tipoModal == \"insertar\" ? __jsx(Button, {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.peticionPost();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }, \"Agregar\") : __jsx(Button, {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.peticionPut();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }\n      }, \"Actualizar\"), __jsx(Button, {\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          return _this2.modalInsertar();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }\n      }, \"Cancelar\"))), __jsx(Modal, {\n        isOpen: this.state.modalEliminar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      }, __jsx(ModalBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }\n      }, \"Est\\xE1s seguro que deseas eliminar esta Task? \", form && form.title), __jsx(ModalFooter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      }, __jsx(\"button\", {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.peticionDelete();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }\n      }, \"Si\"), __jsx(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          return _this2.setState({\n            modalEliminar: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }\n      }, \"NO\"))));\n    }\n  }]);\n\n  return TaskM;\n}(Component);\nexport default TaskM;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programación/Bluuweb/Next/ontime/components/TaskM/TaskM.js"],"names":["React","Component","axios","Button","Modal","ModalHeader","ModalBody","ModalFooter","FormGroup","Input","Label","url","initState","todo","modalInsertar","modalEliminar","tipoModal","form","id","title","TaskM","props","setState","state","e","persist","target","name","value","console","log","get","then","response","data","error","message","post","status","oldState","put","newToDo","peticionGet","length","map","userID","seleccionarTask","handleChange","peticionPost","peticionPut","peticionDelete"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Input, Label} from 'reactstrap';\r\n\r\n//constante JSON\r\nconst url = \"https://jsonplaceholder.typicode.com/todos/\";\r\nconst initState = { \r\n            todo: [],\r\n            modalInsertar: false,\r\n            modalEliminar: false,\r\n            tipoModal: \"\",\r\n            form: {\r\n                id: \"\",\r\n                title: \"\",\r\n              },\r\n        };\r\n\r\nexport class TaskM extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = { \r\n            todo: [],\r\n            modalInsertar: false,\r\n            modalEliminar: false,\r\n            tipoModal: \"\",\r\n            form: {\r\n                id: \"\",\r\n                title: \"\",\r\n              },\r\n        };\r\n    }\r\n\r\n//acciones\r\n    modalInsertar=()=>{\r\n        this.setState({modalInsertar: !this.state.modalInsertar});\r\n    }\r\n    \r\n    handleChange= async e=>{\r\n        e.persist();\r\n        await this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n        console.log(this.state.form);\r\n    }\r\n\r\n    seleccionarTask=(todo)=>{\r\n        this.setState({\r\n            tipoModal: \"actualizar\",\r\n            form: {\r\n                id: todo.id,\r\n                title: todo.title\r\n            }\r\n        })\r\n    }\r\n\r\n//peticiones\r\n    peticionGet=()=> {\r\n        axios.get(url).then(response=>{\r\n            this.setState({todo: response.data});\r\n        }).catch(error=>{\r\n            console.log(error.message);\r\n          })\r\n    }\r\n\r\n    peticionPost = () => axios.post(url, this.state.form).then(response=>{\r\n        if (response.status === 201)\r\n           this.setState(oldState => ({...initState, todo: [...oldState.todo, oldState.form], modalInsertar: !oldState.modalInsertar, }))\r\n            }).catch(error=>{\r\n            console.log(error.message);\r\n    })\r\n\r\n    peticionPut = () => {\r\n        axios.put(`${url}${this.state.form.id}`, this.state.form).then(response=>{\r\n          if (response.status === 200) {\r\n              const newToDo = [...this.state.todo]\r\n              newToDo[this.state.form.id - 1].title = this.state.form.title\r\n              this.setState(oldState => ({...initState, todo: newToDo, modalInsertar: !oldState.modalInsertar, }))\r\n          }\r\n        }).catch(error=>{\r\n           console.log(error.message);\r\n    })}\r\n\r\n     peticionDelete=()=>{\r\n        axios.delete(url + this.state.form.id).then(response=>{\r\n            this.setState({modalEliminar: false});\r\n            this.peticionGet();\r\n        }).catch(error=>{\r\n            console.log(error.message);\r\n     })}\r\n    \r\n    componentDidMount() {\r\n        this.peticionGet();\r\n    }\r\n\r\n//Task Manager\r\n    render() {\r\n        const {form} = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"App\">\r\n                    <br />\r\n                    <Button\r\n                        className=\"btn btn-success\" \r\n                        onClick={\r\n                            () => this.setState(oldState => ({\r\n                                    ...oldState,\r\n                                    modalInsertar: !oldState.modalInsertar,\r\n                                    tipoModal: \"insertar\",\r\n                                    form: {\r\n                                        id: this.state.todo.length+1,\r\n                                        title: \"\",\r\n                                      }\r\n                                }))}\r\n                    >\r\n                                Agregar Task\r\n                    </Button>\r\n                    <br /><br />\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th>ID</th>\r\n                                <th>TASK</th>\r\n                                <th>ACCIONES</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.todo.map((userID,)=>{\r\n                                return(\r\n                                    <tr key={userID.id}>\r\n                                        <td>{userID.id}</td>\r\n                                        <td>{userID.title}</td>\r\n                                        <td>\r\n                                            <button className=\"btn btn-secondary\" \r\n                                            onClick={()=>{this.seleccionarTask(userID); this.modalInsertar()}}>Editar</button>\r\n                                            {\"   \"}\r\n                                            <button className=\"btn btn-danger\"\r\n                                            onClick={()=>{this.seleccionarTask(userID); this.setState({modalEliminar: true})}}\r\n                                            >Eliminar</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Modal Agregar/Editar */}\r\n                <Modal isOpen={this.state.modalInsertar}>\r\n                    <ModalHeader>\r\n                    Nueva Task\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"id\">ID</Label>\r\n                        <Input \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        name=\"id\"  \r\n                        id= \"id\"\r\n                        readOnly \r\n                        onChange={this.handleChange}\r\n                        value={form.id}/>\r\n                        <br />\r\n                        <Label htmlFor=\"title\">Task</Label>\r\n                        <Input \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        name=\"title\" \r\n                        id=\"title\"\r\n                        onChange={this.handleChange}\r\n                        value={form.title}/> \r\n                    </FormGroup>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        {this.state.tipoModal == \"insertar\"?\r\n                        <Button className=\"btn btn-success\" onClick={()=>this.peticionPost()}>Agregar</Button>:\r\n                        <Button className=\"btn btn-success\" onClick={()=>this.peticionPut()}>Actualizar</Button>\r\n                        }\r\n                        <Button className=\"btn btn-danger\" onClick={()=>this.modalInsertar()}>Cancelar</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* Modal Eliminar */}\r\n                <Modal isOpen={this.state.modalEliminar}>\r\n                    <ModalBody>\r\n                        Estás seguro que deseas eliminar esta Task? {form && form.title}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <button className=\"btn btn-success\" onClick={()=>this.peticionDelete()}>Si</button>\r\n                        <button className=\"btn btn-danger\" onClick={()=>this.setState({modalEliminar: false})}>NO</button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskM"]},"metadata":{},"sourceType":"module"}