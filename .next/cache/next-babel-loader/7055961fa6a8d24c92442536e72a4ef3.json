{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\New\\\\context\\\\context.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\"; // .createContext for our global state management rather than each individual compoents\n\nvar Context = React.createContext(); // 'action' will be an object, and it will be a type; so that type we want to be evaluated\n// reducer to evaluate the action type\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"DELETE_CONTACT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // filter out the contact that needs to be filtered out\n        contacts: state.contacts.filter(function (contact // payload is just some data we want to send along with our action, sending 'id' as the payload\n        ) {\n          return contact.id !== action.payload;\n        })\n      });\n\n    case \"ADD_CONTACT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // filter out the contact that needs to be filtered out\n        // Take 'contacts' which is the array of o\n        contacts: [action.payload].concat(_toConsumableArray(state.contacts))\n      });\n\n    case \"UPDATE_CONTACT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: state.contacts.map(function (contact) {\n          return contact.id === action.payload.id ? contact = action.payload : contact;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport var Provider = /*#__PURE__*/function (_Component) {\n  _inherits(Provider, _Component);\n\n  var _super = _createSuper(Provider);\n\n  function Provider() {\n    var _this;\n\n    _classCallCheck(this, Provider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      contacts: [],\n      // When we have a consumer, it consume their entire state because that's what we're passing in.\n      // We should be able to access 'dispatch' anywhere\n      dispatch: function dispatch(action) {\n        return _this.setState(function (state) {\n          return reducer(state, action);\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Provider, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"https://jsonplaceholder.typicode.com/users\");\n\n              case 2:\n                res = _context.sent;\n                this.setState({\n                  contacts: res.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      // We pass in the entire state so we can use it anywhere in our app, including props and functions\n      return __jsx(Context.Provider, {\n        value: this.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return Provider;\n}(Component); // We then export a 'consumer', because we have a 'provider' so consumer can access state\n\nexport var Consumer = Context.Consumer;","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/ProgramaciÃ³n/Bluuweb/Next/ontime/components/New/context/context.js"],"names":["React","Component","axios","Context","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","get","res","data","props","children","Consumer"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,aAAN,EAAhB,C,CAEA;AACA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,gBAAL;AACI,6CAEOF,KAFP;AAEc;AACVG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,MAAf,CACN,UACIC,OADJ,CACY;AADZ;AAAA,iBAEKA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACM,OAF3B;AAAA,SADM;AAHd;;AASJ,SAAK,aAAL;AACI,6CAEOP,KAFP;AAEc;AACV;AACAG,QAAAA,QAAQ,GAAGF,MAAM,CAACM,OAAV,4BAAsBP,KAAK,CAACG,QAA5B;AAJZ;;AAMJ,SAAK,gBAAL;AACI,6CACOH,KADP;AAEIG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,GAAf,CAAmB,UAAAH,OAAO;AAAA,iBAChCA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACM,OAAP,CAAeD,EAA9B,GACGD,OAAO,GAAGJ,MAAM,CAACM,OADpB,GAEEF,OAH8B;AAAA,SAA1B;AAFd;;AAQJ;AACI,aAAOL,KAAP;AA5BR;AA8BH,CA/BD;;AAiCA,WAAaS,QAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DAEY;AACJN,MAAAA,QAAQ,EAAE,EADN;AAEJ;AACA;AACAO,MAAAA,QAAQ,EAAE,kBAAAT,MAAM;AAAA,eAAI,MAAKU,QAAL,CAAc,UAAAX,KAAK;AAAA,iBAAID,OAAO,CAACC,KAAD,EAAQC,MAAR,CAAX;AAAA,SAAnB,CAAJ;AAAA;AAJZ,KAFZ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAU0BL,KAAK,CAACgB,GAAN,CACd,4CADc,CAV1B;;AAAA;AAUcC,gBAAAA,GAVd;AAcQ,qBAAKF,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAAEU,GAAG,CAACC;AAAhB,iBAAd;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BAiBa;AACL;AACA,aACI,MAAC,OAAD,CAAS,QAAT;AAAkB,QAAA,KAAK,EAAE,KAAKd,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKe,KAAL,CAAWC,QADhB,CADJ;AAKH;AAxBL;;AAAA;AAAA,EAA8BrB,SAA9B,E,CA2BA;;AACA,OAAO,IAAMsB,QAAQ,GAAGpB,OAAO,CAACoB,QAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n// .createContext for our global state management rather than each individual compoents\nconst Context = React.createContext();\n\n// 'action' will be an object, and it will be a type; so that type we want to be evaluated\n// reducer to evaluate the action type\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"DELETE_CONTACT\":\n            return {\n                // take the existing state, using spread operatior\n                ...state, // filter out the contact that needs to be filtered out\n                contacts: state.contacts.filter(\n                    (\n                        contact // payload is just some data we want to send along with our action, sending 'id' as the payload\n                    ) => contact.id !== action.payload\n                )\n            };\n        case \"ADD_CONTACT\":\n            return {\n                // take the existing state, using spread operatior\n                ...state, // filter out the contact that needs to be filtered out\n                // Take 'contacts' which is the array of o\n                contacts: [action.payload, ...state.contacts]\n            };\n        case \"UPDATE_CONTACT\":\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => \n                    contact.id === action.payload.id \n                    ? (contact = action.payload)\n                    : contact\n                )\n            };\n        default:\n            return state;\n    }\n};\n\nexport class Provider extends Component {\n    // this is where we have our global state\n    state = {\n        contacts: [],\n        // When we have a consumer, it consume their entire state because that's what we're passing in.\n        // We should be able to access 'dispatch' anywhere\n        dispatch: action => this.setState(state => reducer(state, action))\n    };\n\n    async componentDidMount() {\n        const res = await axios.get(\n            \"https://jsonplaceholder.typicode.com/users\"\n        );\n\n        this.setState({ contacts: res.data });\n    }\n\n    render() {\n        // We pass in the entire state so we can use it anywhere in our app, including props and functions\n        return (\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        );\n    }\n}\n\n// We then export a 'consumer', because we have a 'provider' so consumer can access state\nexport const Consumer = Context.Consumer;\n"]},"metadata":{},"sourceType":"module"}