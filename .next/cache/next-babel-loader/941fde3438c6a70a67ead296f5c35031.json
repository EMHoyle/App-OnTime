{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maria Elena\\\\Desktop\\\\Programaci\\xF3n\\\\Bluuweb\\\\Next\\\\ontime\\\\components\\\\Toggle\\\\Toggle.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport TaskM from '../components/TaskM/TaskM';\n/*\r\n  TodoMVC\r\n  1. add todo\r\n  2. display todos\r\n  3. cross off todo\r\n  4. show number of active todos\r\n  5. filter all/active/complete\r\n  6. delete todo\r\n  7. delete all complete\r\n    7.1 only show if atleast one is complete\r\n  8. button to toggle all on/off\r\n*/\n\nexport default class TodoList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      todos: [],\n      todoToShow: \"all\",\n      toggleAllComplete: true\n    });\n\n    _defineProperty(this, \"addTodo\", todo => {\n      this.setState(state => ({\n        todos: [todo, ...state.todos]\n      }));\n    });\n\n    _defineProperty(this, \"toggleComplete\", id => {\n      this.setState(state => ({\n        todos: state.todos.map(todo => {\n          if (todo.id === id) {\n            // suppose to update\n            return _objectSpread(_objectSpread({}, todo), {}, {\n              complete: !todo.complete\n            });\n          } else {\n            return todo;\n          }\n        })\n      }));\n    });\n\n    _defineProperty(this, \"updateTodoToShow\", s => {\n      this.setState({\n        todoToShow: s\n      });\n    });\n\n    _defineProperty(this, \"handleDeleteTodo\", id => {\n      this.setState(state => ({\n        todos: state.todos.filter(todo => todo.id !== id)\n      }));\n    });\n\n    _defineProperty(this, \"removeAllTodosThatAreComplete\", () => {\n      this.setState(state => ({\n        todos: state.todos.filter(todo => !todo.complete)\n      }));\n    });\n  }\n\n  render() {\n    let todos = [];\n\n    if (this.state.todoToShow === \"all\") {\n      todos = this.state.todos;\n    } else if (this.state.todoToShow === \"active\") {\n      todos = this.state.todos.filter(todo => !todo.complete);\n    } else if (this.state.todoToShow === \"complete\") {\n      todos = this.state.todos.filter(todo => todo.complete);\n    }\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, todos.map(todo => __jsx(TaskM, {\n      key: todo.id,\n      toggleComplete: () => this.toggleComplete(todo.id),\n      onDelete: () => this.handleDeleteTodo(todo.id),\n      todo: todo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, \"todos left: \", this.state.todos.filter(todo => !todo.complete).length), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, __jsx(\"button\", {\n      onClick: () => this.updateTodoToShow(\"all\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \"all\"), __jsx(\"button\", {\n      onClick: () => this.updateTodoToShow(\"active\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"active\"), __jsx(\"button\", {\n      onClick: () => this.updateTodoToShow(\"complete\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"complete\")), this.state.todos.some(todo => todo.complete) ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      onClick: this.removeAllTodosThatAreComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, \"remove all complete todos\")) : null, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, __jsx(\"button\", {\n      onClick: () => this.setState(state => ({\n        todos: state.todos.map(todo => _objectSpread(_objectSpread({}, todo), {}, {\n          complete: state.toggleAllComplete\n        })),\n        toggleAllComplete: !state.toggleAllComplete\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, \"toggle all complete: \", `${this.state.toggleAllComplete}`)));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Maria Elena/Desktop/Programaci√≥n/Bluuweb/Next/ontime/components/Toggle/Toggle.js"],"names":["React","TaskM","TodoList","Component","todos","todoToShow","toggleAllComplete","todo","setState","state","id","map","complete","s","filter","render","toggleComplete","handleDeleteTodo","length","updateTodoToShow","some","removeAllTodosThatAreComplete"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport TaskM from '../components/TaskM/TaskM';\r\n\r\n/*\r\n  TodoMVC\r\n  1. add todo\r\n  2. display todos\r\n  3. cross off todo\r\n  4. show number of active todos\r\n  5. filter all/active/complete\r\n  6. delete todo\r\n  7. delete all complete\r\n    7.1 only show if atleast one is complete\r\n  8. button to toggle all on/off\r\n*/\r\n\r\n\r\nexport default class TodoList extends React.Component {\r\n  state = {\r\n    todos: [],\r\n    todoToShow: \"all\",\r\n    toggleAllComplete: true\r\n  };\r\n\r\n  addTodo = todo => {\r\n    this.setState(state => ({\r\n      todos: [todo, ...state.todos]\r\n    }));\r\n  };\r\n\r\n  toggleComplete = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          // suppose to update\r\n          return {\r\n            ...todo,\r\n            complete: !todo.complete\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      })\r\n    }));\r\n  };\r\n\r\n  updateTodoToShow = s => {\r\n    this.setState({\r\n      todoToShow: s\r\n    });\r\n  };\r\n\r\n  handleDeleteTodo = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => todo.id !== id)\r\n    }));\r\n  };\r\n\r\n  removeAllTodosThatAreComplete = () => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => !todo.complete)\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let todos = [];\r\n\r\n    if (this.state.todoToShow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todoToShow === \"active\") {\r\n      todos = this.state.todos.filter(todo => !todo.complete);\r\n    } else if (this.state.todoToShow === \"complete\") {\r\n      todos = this.state.todos.filter(todo => todo.complete);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {todos.map(todo => (\r\n          <TaskM\r\n            key={todo.id}\r\n            toggleComplete={() => this.toggleComplete(todo.id)}\r\n            onDelete={() => this.handleDeleteTodo(todo.id)}\r\n            todo={todo}\r\n          />\r\n        ))}\r\n        <div>\r\n          todos left: {this.state.todos.filter(todo => !todo.complete).length}\r\n        </div>\r\n        <div>\r\n          <button onClick={() => this.updateTodoToShow(\"all\")}>all</button>\r\n          <button onClick={() => this.updateTodoToShow(\"active\")}>\r\n            active\r\n          </button>\r\n          <button onClick={() => this.updateTodoToShow(\"complete\")}>\r\n            complete\r\n          </button>\r\n        </div>\r\n        {this.state.todos.some(todo => todo.complete) ? (\r\n          <div>\r\n            <button onClick={this.removeAllTodosThatAreComplete}>\r\n              remove all complete todos\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n        <div>\r\n          <button\r\n            onClick={() =>\r\n              this.setState(state => ({\r\n                todos: state.todos.map(todo => ({\r\n                  ...todo,\r\n                  complete: state.toggleAllComplete\r\n                })),\r\n                toggleAllComplete: !state.toggleAllComplete\r\n              }))\r\n            }\r\n          >\r\n            toggle all complete: {`${this.state.toggleAllComplete}`}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}